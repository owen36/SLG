using System;
using System.Collections.Generic;
using Unisave;
using Unisave.Entities;
using Unisave.Facades;
using Unisave.Modules.Matchmaking;

public class MatchEntity : BasicMatchEntity<PlayerEntity>
{
    // TODO: put here all the data you need to know about a match
    
    /// <summary>
    /// What player makes the first move?
    /// </summary>
    public EntityReference<PlayerEntity> PlayerThatBegins { get; set; }
}

public class MatchmakerTicket : BasicMatchmakerTicket
{
    // TODO: put here all the data you need to know about a waiting player
    
    /// <summary>
    /// What rating does the player have
    /// </summary>
    public int playerRating;
}

public class MatchmakerFacet : BasicMatchmakerFacet<
    PlayerEntity, MatchmakerTicket, MatchEntity
>
{
    /// <summary>
    /// Called when a new ticket is inserted into the matchmaker
    /// (verify data provided by the client, calculate sth. or just do nothing)
    /// </summary>
    /// <param name="ticket">Newly inserted ticket</param>
    protected override void PrepareNewTicket(MatchmakerTicket ticket)
    {
        // TODO: replace this code with your own matchmaker implementation
        // e.g. calculate player rating:

        PlayerEntity player = GetPlayer();
        
        ticket.playerRating = player.Email.Length;
    }
    
    /// <summary>
    /// Called whenever the matchmaker state changes
    /// (new ticket comes in or some time elapses)
    /// </summary>
    /// <param name="tickets">Waiting tickets (players)</param>
    protected override void CreateMatches(List<MatchmakerTicket> tickets)
    {
        // TODO: replace this code with your own matchmaker implementation
        // e.g. match pairs of players with similar score
        
        // sort waiting players by their score
        tickets.Sort((a, b) => a.playerRating.CompareTo(b.playerRating));
        
        // while we have enough tickets
        while (tickets.Count >= 2)
        {
            // take first two tickets from the queue
            var selectedTickets = tickets.GetRange(index: 0, count: 2);
            tickets.RemoveRange(index: 0, count: 2);

            // create a match with those tickets
            var match = new MatchEntity {
                PlayerThatBegins = new EntityReference<PlayerEntity>(
                    selectedTickets[0].PlayerId
                ) // lower score
            };
            
            // launch the match
            SaveAndStartMatch(selectedTickets, match);
        }
    }
    
    /// <summary>
    /// When joining the matchmaker,
    /// this method returns the player that is joining
    /// </summary>
    protected override PlayerEntity GetPlayer()
    {
        return Auth.GetPlayer<PlayerEntity>();
    }
}